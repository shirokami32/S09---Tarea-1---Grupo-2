#include <iostream>
#include <list>
#include <vector>
#include <string>
#include <limits>


class HashTable {
private:
    // Número de "buckets" (espacios) en la tabla hash
    int capacity;
    // Tabla hash representada como un vector de listas
    std::vector<std::list<std::pair<std::string, int>>> table;

    // Función hash
    int hashFunction(const std::string& key) {
        int hashValue = 0;
        for (char ch : key) {
            hashValue += ch; // Suma los valores ASCII de los caracteres
        }
        return hashValue % capacity; // Retorna el índice dentro del rango
    }

public:
    // Constructor
    HashTable(int size) : capacity(size) {
        table.resize(capacity);
    }

    // Insertar producto (si existe, suma cantidad)
    void insert(const std::string& key, int value) {
        if (value <= 0) {
            std::cout << "Cantidad inválida. Debe ser un número positivo.\n";
            return;
        }
        int index = hashFunction(key);
        for (auto& pair : table[index]) {
            if (pair.first == key) {
                pair.second += value; // ahora suma en lugar de sobrescribir
                std::cout << "Cantidad actualizada: " << key 
                          << " (total: " << pair.second << ")\n";
                return;
            }
        }
        table[index].emplace_back(key, value);
        std::cout << "Producto agregado: " << key 
                  << " (cantidad: " << value << ")\n";
    }

    // Buscar cantidad de producto
    int search(const std::string& key) {
        int index = hashFunction(key);
        for (const auto& pair : table[index]) {
            if (pair.first == key) {
                return pair.second;
            }
        }
        return -1; 
    }


    // Eliminar producto
    void remove(const std::string& key) {
        int index = hashFunction(key);
        auto& entries = table[index];
        for (auto it = entries.begin(); it != entries.end(); ++it) {
            if (it->first == key) {
                entries.erase(it);
                std::cout << "Producto eliminado: " << key << "\n";
                return;
            }
        }
        std::cout << "Producto no encontrado: " << key << "\n";
    }

    // Mostrar inventario
    void display() {
    std::cout << "----Inventario----\n" << endl;
    bool empty = true;
        for (int i = 0; i < capacity; ++i) {
            for (const auto& pair : table[i]) {
                std::cout << "Producto: " << pair.first << " | Cantidad: " << pair.second << std::endl;
                empty = false;
            }
            std::cout << std::endl;
        }
        if (empty) std::cout << "(Inventario vacío)\n";
        std::cout << "--------------------\n";
    }
};

int main() {
    HashTable ht(10);

    while (true) {
        std::cout << "\nMenu:\n";
        std::cout << "a. Agregar producto\n";
        std::cout << "b. Buscar cantidad de producto\n";
        std::cout << "c. Eliminar producto\n";
        std::cout << "d. Mostrar inventario\n";
        std::cout << "e. Salir\n";
        std::cout << "Opción: ";

        char option;
        std::cin >> option;
        std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');

        if (option == 'a' || option == 'A') {
            std::string key;
            int value;
            std::cout << "Nombre del producto: ";
            std::getline(std::cin, key);
            std::cout << "Cantidad: ";
            std::cin >> value;
            std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
            ht.insert(key, value);
        }
        else if (option == 'b' || option == 'B') {
            std::string key;
            std::cout << "Producto a buscar: ";
            std::getline(std::cin, key);
            int result = ht.search(key);
            if (result >= 0)
                std::cout << "Cantidad de '" << key << "': " << result << "\n";
            else
                std::cout << "Producto no encontrado.\n";
        }
        else if (option == 'c' || option == 'C') {
            std::string key;
            std::cout << "Producto a eliminar: ";
            std::getline(std::cin, key);
            ht.remove(key);
        }
        else if (option == 'd' || option == 'D') {
            ht.display();
        }
        else if (option == 'e' || option == 'E') {
            std::cout << "Saliendo...\n";
            break;
        }
        else {
            std::cout << "Opción inválida.\n";
        }
    }

    return 0;
}

