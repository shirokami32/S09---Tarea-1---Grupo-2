#include <iostream>
#include <list>
#include <vector>
#include <string>
#include <limits>


class HashTable {
private:
    // Número de "buckets" (espacios) en la tabla hash
    int capacity;
    // Tabla hash representada como un vector de listas
    std::vector<std::list<std::pair<std::string, int>>> table;

    // Función hash
    int hashFunction(const std::string& key) {
        int hashValue = 0;
        for (char ch : key) {
            hashValue += ch; // Suma los valores ASCII de los caracteres
        }
        return hashValue % capacity; // Retorna el índice dentro del rango
    }

public:
    // Constructor
    HashTable(int size) : capacity(size) {
        table.resize(capacity);
    }

    // Insertar producto (si existe, suma cantidad)
    void insert(const std::string& key, int value) {
        if (value <= 0) {
            std::cout << "Cantidad inválida. Debe ser un número positivo.\n";
            return;
        }
        int index = hashFunction(key);
        for (auto& pair : table[index]) {
            if (pair.first == key) {
                pair.second += value; // ahora suma en lugar de sobrescribir
                std::cout << "Cantidad actualizada: " << key 
                          << " (total: " << pair.second << ")\n";
                return;
            }
        }
        table[index].emplace_back(key, value);
        std::cout << "Producto agregado: " << key 
                  << " (cantidad: " << value << ")\n";
    }

    // Buscar cantidad de producto
    int search(const std::string& key) {
        int index = hashFunction(key);
        for (const auto& pair : table[index]) {
            if (pair.first == key) {
                return pair.second;
            }
        }
        return -1; 
    }


    // Eliminación de un par clave-valor
    void remove(const std::string& key) {
        int index = hashFunction(key);
        auto& entries = table[index];
        for (auto it = entries.begin(); it != entries.end(); ++it) {
            if (it->first == key) {
                entries.erase(it); // Elimina la entrada
                return;
            }
        }
    }

    // Mostrar el inventario
    void display() {
    std::cout << "----Inventario----\n" << endl;
        for (int i = 0; i < capacity; ++i) {
            for (const auto& pair : table[i]) {
                std::cout << "Producto: " << pair.first << " | Cantidad: " << pair.second << std::endl;
            }
            std::cout << std::endl;
        }
    }
};

int main() {
    HashTable ht(10); // Crear una tabla hash de tamaño 10

    ht.insert("apple", 1);
    ht.insert("banana", 2);
    ht.insert("orange", 3);

    std::cout << "Tabla hash después de inserciones:" << std::endl;
    ht.display();

    std::cout << "Buscar 'banana': " << ht.search("banana") << std::endl;
    std::cout << "Buscar 'grape': " << ht.search("grape") << std::endl;

    ht.remove("banana");
    std::cout << "Tabla hash después de eliminar 'banana':" << std::endl;
    ht.display();

    return 0;
}
